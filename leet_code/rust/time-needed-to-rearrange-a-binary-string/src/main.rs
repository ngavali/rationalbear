struct Solution;

impl Solution {
    pub fn seconds_to_remove_occurrences_pass1(s: String) -> i32 {
        let (mut i, mut j) = (0, -1);
        let mut s = s.into_bytes();
        let mut c = 1;
        while c > 0 {
            (i, c) = (0, 0);
            while i < s.len()-1 {
                if s[i] == b'0' && s[i+1] == b'1' {
                    s[i] = s[i] + s[i+1];
                    s[i+1] = s[i] - s[i+1];
                    s[i] = s[i] - s[i+1];
                    i+=2;
                    c+=1;
                } else {
                    i+=1;
                }
            }
            j+=1;
        }
        j
    }

    pub fn seconds_to_remove_occurrences(s: String) -> i32 {
        let (mut zeros, mut ans) = (0,0);
        let s = s.into_bytes();
        for i in 0..s.len() {
            if s[i] == 48 {
                zeros += 1;
            } else if zeros > 0 {
                ans = (ans+1).max(zeros);
            }
        }
        ans
    }
}

fn main() {
    println!("Hello, world!");
}

#[cfg(test)]
mod tests{
    fn testcases() ->  Vec<(String, i32)>  {
        vec![
            ("0110101".to_string(),4 ),
            ("11100".to_string(), 0),
("010110000100".to_string(), 6),
("11111010100100100100000010010000001111101111010110001001010110000101101000110111110100111111000100000101010011001010101101100001100100000000001010111110011001010011001011000010100100010101000010010".to_string(), 109),
("010110101001011111011001110100000110010000100101001010110100110000010110011110000110011001010111110111001011110101011000000000011111000001101001010101101101001110101000110110010100101000011110000101010110000001011000010100111011011110000111011011101110100110001011101101110001111001101100101001010111010001100010100011100101010100100011111010110100100101011111000110000110101111100001100110010000".to_string(), 210),
to_string(), 363),
to_string(), 345),
("0010100111111011100000011110001101000001101011".to_string(), 25),
("01010011110001110010111001111011010101110110110101010010000000101110101010111001001000011110000011111101110111100000100001111".to_string(), 67),
("100000001000010010000000100010000100110001001110111110110001101110001111000000010011011101101101011111010101111111001000001001110110000011110000011100100011111000101011100010100111110001100000001010111010101010001010101100001100000111010010000000001010110011101111111111000001010101110000001011001000001100100111111000001011000101101101110101100101101000100110010101101010111000001000100101000011001".to_string(), 217),
        ]
    }

    use super::Solution;
    #[test]
    fn test_seconds_to_remove_occurrences() {
        for (s, want) in testcases() {
            assert_eq!(Solution::seconds_to_remove_occurrences(s), want);
        }
    }
}
