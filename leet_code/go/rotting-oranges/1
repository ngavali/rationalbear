package main

import "fmt"

type Grid [][]int
type Pos [2]int

var M, N int

func orangesRotting(grid [][]int) (minute int) {

    M := len(grid)
    N := len(grid[0])
    queue := make([]Pos, 0, M*N)

    visited := make([][]int, M)
    for i := range visited {
        visited[i] = make([]int, N)
    }

    for i := range grid {
        for j := range grid[i] {
            if grid[i][j] == 2 {
                queue = append(queue, Pos{i, j})
            }
        }
    }

    fmt.Println("Start ->", M, N, queue, grid)
    for len(queue) > 0 {
        location := queue[0]

        x := location[0]
        y := location[1]

        if grid[x][y] == 2 {
            fmt.Println("W...", x, y)
            grid[x][y]++

            if x+1 < M && grid[x+1][y] == 1 {
                grid[x+1][y]++
                queue = append(queue, Pos{x + 1, y})
            }
            if x-1 >= 0 && grid[x-1][y] == 1 {
                grid[x-1][y]++
                queue = append(queue, Pos{x - 1, y})
            }
            if y+1 < N && grid[x][y+1] == 1 {
                grid[x][y+1]++
                queue = append(queue, Pos{x, y + 1})
            }
            if y-1 >= 0 && grid[x][y-1] == 1 {
                grid[x][y-1]++
                queue = append(queue, Pos{x, y - 1})
            }

        }

        queue = queue[1:]
    }

    fmt.Println("End   ->", M, N, queue, grid)

    return
}

func main() {
    grids := []Grid{
        {
            {2, 1, 1},
            {1, 1, 0},
            {0, 1, 1},
        },
        {
            {2, 1, 1},
            {0, 1, 1},
            {1, 0, 1},
        },
        {
            {0, 2},
        },
    }
    for i := range grids {
        fmt.Println(orangesRotting(grids[i]))
    }
}
